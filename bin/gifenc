#!/bin/sh
# high quality gif with ffmpeg
# http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html
# usage: gifenc <input> [<res> <fps> <output>]
# examples
#  $ gifenc video.mp4 -1
#  keep original resolution of input
#  $ gifenc video.mp4 320
#  outputs at 320 scale
#  $ gifenc video.mp4 640 30
#  outputs at 640 scale and 30 fps

which ffmpeg > /dev/null
if [[ $? -eq "1" ]]; then
  echo "ffmpeg required; Try > brew install ffmpeg"
  exit 1
fi


# INPUT is required
INPUT=$1
if [ ! -f $INPUT ]; then
   echo "$INPUT does not exist"
   exit 1
fi

OUTPUT=${4:-"${INPUT%.*}.gif"}  # Default to <INPUT>.gif
RES=${2:-"480"}                 # Default to 480p
FPS=${3:-"15"}                  # Default to 15 fps


# get maximum fps of input
SOURCE_FPS=$(ffmpeg -i $INPUT 2>&1 | sed -n "s/.*, \(.*\) fp.*/\1/p" | awk '{print int($1+0.5)}')
if [ $FPS -gt $SOURCE_FPS ]; then
  echo "$(basename $INPUT) has FPS=$SOURCE_FPS; lower FPS argument [$FPS]"
  exit 1
fi


filters="fps=$FPS,scale=w=$RES:h=$RES:force_original_aspect_ratio=decrease:flags=lanczos"
f_palettegen="palettegen=stats_mode=diff"
f_paletteuse="paletteuse"

# run fps and scale filters first with just video as input ([0:v] 0-th -i input as input to filters)
# split this filtered (fps/scale) video input two streams [a][b]
# pass [a] into palettegen to generate a color palette [p]
# pass [b] along with the palette [p] into the paletteuse filter
ffmpeg -i $INPUT -filter_complex "[0:v] $filters,split [a][b];[a] $f_palettegen [p];[b][p] paletteuse=new=1" $OUTPUT
