#!/bin/bash

# set -x

MASTER_BRANCH="master"
CURRENT_BRANCH="$(git branch --show-current)"

# default to master branch
DEFAULT_MAIN_BRANCH=$MASTER_BRANCH
# if master branch does not exist, fallback to main
if [[ "$(git branch --list "$MASTER_BRANCH")" == "" ]]; then
  DEFAULT_MAIN_BRANCH="main"
fi

TARGET_BRANCH=${1:-$CURRENT_BRANCH}
SOURCE_BRANCH=${2:-$DEFAULT_MAIN_BRANCH}

check_sync_exit_code() {
  local exit_code="$1"

  if [[ ! "$exit_code" -eq "0" ]]; then
    echo "üö® Failure to update source branch [$SOURCE_BRANCH]"
    exit 1
  fi
}


# handle special case when we are on the source branch
if [[ "$CURRENT_BRANCH" == "$SOURCE_BRANCH" ]]; then
  git fetch --no-tags origin "$SOURCE_BRANCH"
  git switch -C "$SOURCE_BRANCH" "origin/$SOURCE_BRANCH"
  check_sync_exit_code $?
else
  # otherwise update local source branch from origin
  git fetch --no-tags origin "$SOURCE_BRANCH":"$SOURCE_BRANCH"
  check_sync_exit_code $?
fi

# early exit if we are already on the target branch
if [[ "$TARGET_BRANCH" == "$SOURCE_BRANCH" && "$CURRENT_BRANCH" == "$SOURCE_BRANCH" ]]; then
  exit 0
fi


target="$(git branch-grep "$TARGET_BRANCH")"

if [ -z "$target" ]; then
  echo "‚ùå [$TARGET_BRANCH] does not match any existing branches."
  exit 1
fi

# rebase target branch onto the tip of source branch
# effectively moves base of target branch to tip of source branch
git rebase --apply "$SOURCE_BRANCH" "$target"




